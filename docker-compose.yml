version: '3.9'
services:

  minio:
    hostname: minio
    #image: 'minio/minio'
    image: answercn/minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --console-address ":9001"
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  mc:
    #image: minio/mc
    image: answercn/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    networks:
      - ndsnet
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "    
    depends_on:
      minio:
        condition: service_healthy  

  postgres:
    #image: postgres
    image: answercn/postgres
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=ngods
      - POSTGRES_USER=ngods
      - POSTGRES_DB=ngods
    ports:
      - '5432'
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ngods"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  aio:
    build: projects/
    container_name: aio
    #environment:
    #  - AWS_ACCESS_KEY_ID=minio
    #  - AWS_SECRET_ACCESS_KEY=minio123
    #  - AWS_REGION=us-east-1
    ports:
      #- '8888:8888' # Spark notebook port
      #- '7077:7077' # Spark port
      #- '8061:8061' # Spark master web ui port
      #- '8062:8062' # Spark worker web ui port
      #- '10001:10001' # Thrift ODBC/JDBC port
      #- '10009:10009' # Kyuubi JDBC port
      #- '18080:18080' # Spark history web ui port
      - "3000:3000" # Dagster web ui port
    networks:
      ndsnet:
        aliases:
          - dagster
          - dbt
          - aio
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

networks:
  ndsnet:
    driver: bridge
